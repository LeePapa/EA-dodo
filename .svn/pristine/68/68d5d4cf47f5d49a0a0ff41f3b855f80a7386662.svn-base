<?php
/**
 * Created by PhpStorm.
 * User: wuchuguang
 * Date: 17-7-31
 * Time: 下午2:26
 */

namespace app\common\cache\driver;


use app\common\cache\Cache;
use swoole\SwooleTasker;

class Queuer extends Cache
{

    protected $db = 1;
    private $zsetQueue = 'zset:queue|hosttype_';

    public function lock($key)
    {
        return $this->redis->set('lock:' . $key, time(), ['nx', 'ex' => 5]);
    }

    public function unlock($key)
    {
        $this->redis->del('lock:' . $key);
    }

    public function addSwooleWorker($worker, $priority = 1)
    {
        $this->persistRedis->hSet('hash:queues|swooleWorker', $worker, intval($priority));
    }

    public function isSwooleWorker($worker)
    {
        return $this->persistRedis->hExists("hash:queues|swooleWorker", $worker);
    }

    public function remSwooleWorker($worker)
    {
        $this->persistRedis->hDel('hash:queues|swooleWorker', $worker);
    }

    public function getSwooleWorkers()
    {
        return $this->persistRedis->hGetAll('hash:queues|swooleWorker');
    }
    
    //----------------start-------------------
    public function addQueueHostType($queuer, $hostType, $priority = 1)
    {
    	return $this->persistRedis->zAdd($this->zsetQueue . $hostType, $priority, $queuer);
    }
    public function remQueueHostType($queuer, $hostType='common')
    {
    	return $this->persistRedis->zRem($this->zsetQueue . $hostType, $queuer);
    }
    public function changeQueueHostType($queuer, $oldType, $newType, $priority)
    {
    	$this->persistRedis->multi();
    	$this->remQueueHostType($queuer, $oldType);
    	$this->addQueueHostType($queuer, $newType, $priority);
    	return $this->persistRedis->exec() ? true : false;
    }
    public function getQueueByHostType($hostType)
    {
    	return $this->persistRedis->zRevRange($this->zsetQueue . $hostType, 0, -1, true);
    }
    public function checkQueueHostType($queuer, $hostType)
    {
    	return $this->persistRedis->zScore($this->zsetQueue . $hostType, $queuer) ? true : false;
    }
    //-----------------------------------
    
    public function queueCount($queuer, $incr = 0)
    {
        return $this->persistRedis->hIncrBy("hash:queues|count", $queuer, $incr) ?: 0;
    }

    public function remQueue($queuer, $params)
    {
        return $this->persistRedis->lRem("queue:$queuer", serialize($params), 1);
    }

    public function doQueue($queuer, $used = 0)
    {
        return $this->persistRedis->hIncrBy('hash:queues|doing', $queuer, $used);
    }

    public function clearDoQueues()
    {
        $this->persistRedis->del('hash:queues|doing');
    }


    public function queues()
    {
        return $this->persistRedis->hGetAll('hash:queues') ?: [];
    }


    public function pushQueue($queuer, $params)
    {
        if($this->persistRedis->lPush("queue:$queuer", $params)){
            $this->memberCountIncr($queuer, $params, 1);
        }
    }

    public function pushTimer($queuer, $params, $timer)
    {
        if($this->persistRedis->zAdd("timer:scopes:$queuer", $timer, serialize([$queuer, $params]))){
            $this->memberCountIncr($queuer, $params, 1);
        }
    }
    
    public function removeTimer($queuer, $params)
    {
       return $this->persistRedis->zRem("timer:scopes:$queuer", serialize([$queuer, $params]));
    }

    public function allTimerTick()
    {
        $keys = $this->persistRedis->keys("timer:scopes:*");
        foreach ($keys as $key) {
            $this->timerTick($key);
        }
        unset($keys);
        $this->timerTick();
    }

    public function timerTick($key = 'timer:scopes')
    {
        $now = time();
        $lastCount = $this->persistRedis->zCard($key);
        if ($lastCount <= 0) {
            return;
        }
        $queues = $this->persistRedis->zRangeByScore($key, '-inf', $now, ['limit' => [0, 100]]);
        $this->persistRedis->multi();
        foreach ($queues as $queue) {
            /**
             * @var $params string
             */
            list($queue, $params) = unserialize($queue);
            $this->pushTopQueue($queue, $params);
            $this->addSwooleWorker($queue);
        }
        $count = count($queues);
        array_unshift($queues, $key);
        call_user_func_array([$this->persistRedis, "zRem"], $queues);
        if (!$this->persistRedis->exec()) {
            $this->timerTick($key);
        }
        $remainCount = $this->persistRedis->zCard($key);
        unset($queues);
        echo "Queuer:timerTick Key:{$key} {$count} lastCount {$lastCount} remainCount {$remainCount} success\n";
    }

    public function pushTopQueue($queuer, $params)
    {
        $this->persistRedis->rPush("queue:$queuer", $params);
    }

    public function popQueue($queuer)
    {
        $result = null;
        $loopCount = 0;
        if($this->persistRedis->lLen("queue:$queuer") < 2 && $this->persistRedis->hLen("hash:queuer|$queuer") < 1){
        	return $result;
        }
        $pop = $this->persistRedis->rpoplpush("queue:$queuer", "queueWait:$queuer") ?: false;
        if ($pop) {
            do{
                $loopCount++;
                $num = $this->memberCount($queuer, $pop);
            }while(!$num && $loopCount <= 10);
            //
            if($num){
                $result = $pop;
            }else{
                $this->remWaitQueue($queuer, unserialize($pop));
                SwooleTasker::logFile('popQueue_nohash', $queuer .','. var_export(unserialize($pop), true));
            }
        }
        return $result;
    }

    public function queueLength($queuer)
    {
        return $this->persistRedis->lLen("queue:$queuer");
    }

    /**
     * @doc 队列
     */
    public function addQueue($queuer, $type)
    {
        $this->persistRedis->hSet('hash:queues', $queuer, $type);
    }

    public function getQueue($queuer)
    {
        return $this->persistRedis->hGet('hash:queues', $queuer);
    }

    //删除整个队列
    public function delQueue($queuer, $hosttype)
    {
        //$this->remSwooleWorker($queuer);
    	$this->remQueueHostType($queuer, $hosttype);
        $this->persistRedis->hDel('hash:queues', $queuer);
        $this->persistRedis->del("queue:$queuer");
        $this->persistRedis->del("hash:queuer|$queuer");
        $this->persistRedis->del("hash:queue|fail|$queuer");
        $this->persistRedis->del("timer:scopes:$queuer");
    }

    public function delFailTag($queuer, $element = null)
    {
        if ($element) {
            $this->persistRedis->hDel("hash:queue|fail|$queuer", $element);
        } else {
            $this->persistRedis->del("hash:queue|fail|$queuer");
        }

    }

    public function restWaitQueue($queuer = null, $params = null)
    {
        if($queuer){
            $qKey = "queue:$queuer";
            $waitQueueKey = "queueWait:$queuer";
            if($params){
                $params = serialize($params);
                if($this->persistRedis->lPush($qKey, $params)){
                    $this->persistRedis->lRem($waitQueueKey, $params, 1);
                }
            }else{
                while($this->persistRedis->rpoplpush($waitQueueKey, $qKey)){
                }
                $this->persistRedis->del($waitQueueKey);
            }
            //$this->addSwooleWorker($queuer, forward_static_call([$queuer, 'getPriority']));
        }else{
            $types = $this->persistRedis->keys("queueWait:*");
            $cutLen = strlen("queueWait:");
            foreach ($types as $type) {
                $queue = substr($type, $cutLen);
                while ($param = $this->persistRedis->rpoplpush($type, "queue:$queue")){
                }
                $this->persistRedis->del($type);
                //$this->addSwooleWorker($queue, forward_static_call([$queue, 'getPriority']));
            }
        }

    }

    public function isExistWaitQueue($queuer, $element)
    {

    }
    
    public function showWaitQueue($queuer, $len=19)
    {
        $result = $this->persistRedis->lRange("queueWait:$queuer", 0, $len);
        foreach ($result as $k => $val){
            $result[$k] = unserialize($val);
        }
        return $result;
    }

    public function remWaitQueue($queue, $params, $isDelayed = null)
    {
        $params = serialize($params);
        if(! $isDelayed){
            if($this->memberCountIncr($queue, $params, -1) <= 0){
                $this->memberRemove($queue, $params);
            }
        }
        $result = $this->persistRedis->lRem("queueWait:$queue", $params, 1);
    }

    public function members($queuer)
    {
        $iter = null;
        $rets = [];
        while ($ret = $this->persistRedis->hScan("hash:queuer|$queuer", $iter, "*", 30)) {
            $rets = array_merge($rets, $ret);
        }
        return array_keys($rets);
    }

    public function timers($queuer)
    {
        $ret = $this->persistRedis->zRange("timer:scopes:$queuer", 0, -1, true) ?: [];
        $result = [];
        foreach ($ret as $element => $time) {
            list($_, $element) = unserialize($element);
            $result[] = [
                'element' => unserialize($element),
                'timer' => $time
            ];
        }
        return $result;
    }

    public function membersCounts($queuer)
    {
        $iter = null;
        $rets = [];
        while ($ret = $this->persistRedis->hScan("hash:queuer|$queuer", $iter, "*", 30)) {
            $rets = array_merge($rets, $ret);
        }
        return $rets;
    }

    public function memberCount($queuer, $params)
    {
        if ($val = $this->persistRedis->hGet("hash:queuer|$queuer", $params)) {
            return intval($val);
        } else {
            return 0;
        }
    }

    public function memberCountIncr($queuer, $params, $incr)
    {
        $ret = $this->persistRedis->hIncrBy("hash:queuer|$queuer", $params, $incr);
        if (($ret > 1) && ($incr > 1)) {
            $trace = debug_backtrace(DEBUG_BACKTRACE_IGNORE_ARGS, 15);
            $trace = array_slice($trace, 5, count($trace));
            $trace = array_map(function ($t) {
                return $t['class'] . ":" . $t['line'];
            }, $trace);
            $trace = join("; ", $trace);
            SwooleTasker::logFile('memberCountIncrTRace', $queuer . ":$ret:$params; $trace");
        }
        return $ret;
    }

    public function memberRemove($queuer, $params)
    {
        $res = $this->persistRedis->hDel("hash:queuer|$queuer", $params);
        if(! $res) $res = $this->persistRedis->hDel("hash:queuer|$queuer", $params);
        return $res ? true : false;
    }

    public function stopSwooleQueue($queue, $bool = true): bool
    {
        $ret = null;
        if ($bool) {
            $ret = $this->persistRedis->sAdd('sets:swoole-stops', $queue);
        } else {
            $ret = $this->persistRedis->sRem('sets:swoole-stops', $queue);
        }
        return !!$ret;
    }

    public function isStopSwooleQueue($quque): bool
    {
        return $this->persistRedis->sIsMember('sets:swoole-stops', $quque);
    }

    private const QUEUER_RUNTYPE = "hash:queuer-runtype";
    public function setQueueRunType($queue, $runType)
    {
        $this->persistRedis->hSet(self::QUEUER_RUNTYPE, $queue, $runType);
    }

    public function getQueueRunType($queue)
    {
        return $this->persistRedis->hGet(self::QUEUER_RUNTYPE,$queue);
    }

    public function getQueuesRunType()
    {
        return $this->persistRedis->hGetAll(self::QUEUER_RUNTYPE);
    }

    public function getTimeout($queuer)
    {
        $timeout = $this->persistRedis->hGet('hash:queues|timeout', $queuer);
        if(false === $timeout){
            return null;
        }else{
            return $timeout;
        }
    }

    public function setTimeout($queuer, $timeout)
    {
        $this->persistRedis->hSet('hash:queues|timeout', $queuer, $timeout);
    }

    public function taskSet($taskId, $queuer, $params)
    {
        $info = [
            'queuer' => $queuer,
            'params' => $params,
            'dotime' => time()
        ];
        $this->persistRedis->hSet('hash:queues|tasks', $taskId, serialize($info));
    }

    public function taskDel($taskId)
    {
        $this->persistRedis->hDel('hash:queues|tasks', $taskId);
    }

    public function taskGets($taskId = null)
    {
        $key = 'hash:queues|tasks';
        if($taskId){
            $task = $this->persistRedis->hGet($key, $taskId);
            $result = $task ? unserialize($task) : null;
        }else{
            $result = $this->persistRedis->hGetAll($key);
        }
        return $result;
    }

    public function clearTasks()
    {
        $this->persistRedis->del('hash:queues|tasks');
    }

    public function addFailZset($queuer, $timeout, $params)
    {
        $this->persistRedis->zAdd('zset:queues|expires', $timeout, serialize(['queuer' => $queuer, 'params' => $params]));
    }

    public function resetFailToQueues()
    {
        $now = time();
        $key = 'zset:queues|expires';
        $lastCount = $this->persistRedis->zCard($key);
        $queues = $this->persistRedis->zRangeByScore($key, '-inf', $now, ['limit' => [0, 100]]);
        $this->persistRedis->multi();
        foreach ($queues as $queueOrgin) {
            /**
             * @var $params string
             */
            list('queuer' => $queue, 'params' => $params) = unserialize($queueOrgin);
            $this->pushTopQueue($queue, $params);
            $this->addSwooleWorker($queue);
        }
        $count = count($queues);
        array_unshift($queues, $key);
        call_user_func_array([$this->persistRedis, "zRem"], $queues);
        if (!$this->persistRedis->exec()) {
            $this->resetFailToQueues();
        }
        $remainCount = $this->persistRedis->zCard($key);
        unset($queues);
        echo "Queuer:resetFailToQueues process {$count} last {$lastCount} remain {$remainCount} success\n";
    }

    public function failCount($queuer, $element, $incr = 0)
    {
        $key = "hash:queue|fail|$queuer";
        if(0==$incr){
            $result = $this->persistRedis->hGet($key, serialize($element));
        }else{
            $result = $this->persistRedis->hIncrBy($key, serialize($element), $incr);
        }
        return $result;
    }

    public function removeFailCount($queuer, $element)
    {
        $key = "hash:queue|fail|$queuer";
        return !!$this->persistRedis->hDel($key, serialize($element));
    }
}
