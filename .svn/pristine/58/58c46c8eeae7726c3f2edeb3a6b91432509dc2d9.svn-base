<?php
/**
 * Created by PhpStorm.
 * User: wuchuguang
 * Date: 17-8-4
 * Time: 上午10:39
 */

namespace app\index\service;


use app\common\annotations\QueueType;
use app\common\cache\Cache;
use app\common\cache\driver\Queuer;
use app\common\cache\driver\QueuerLog;
use app\common\exception\JsonErrorException;
use app\common\interfaces\QueueJob;
use app\common\service\SwooleQueueJob;
// use app\common\service\SwooleQueueWorker;
// use Nette\Reflection\ClassType;
use swoole\cmd\QueueStatus;
use swoole\cmd\StopTableTask;
use swoole\cmd\SwooleStatus;
use swoole\SwooleCmder;

class Queue
{
    const QUEUE_JOB_FILE = APP_PATH."queue_job.php";
    /**
     * @var Queuer
     */
    private $cache;
    /**
     * @var \app\common\cache\driver\TaskWorker
     */
    private $taskCache;

    /**
     * @var QueuerLog
     */
    private $cacheLog;
    private $myi = 0;
    private $tmpQueues = [];

    public function __construct()
    {
        $this->cache = Cache::store('queuer');
        $this->cacheLog = Cache::store('queuerLog');
        $this->taskCache = Cache::store('taskWorker');
    }
    
    function lookupDir($dir, $callback = null)
    {
        $result = false;
        if (is_dir($dir)) {
            if ($handle = opendir($dir)) {
                $result = true;
                $this->myi++;
                while(false !== ($file = readdir($handle))) {
                    if ($file != '.' && $file != '..') {
                        if($callback && ! is_dir($file)){
                            array_push($this->tmpQueues, $callback . basename($file, '.php'));
                        }else{
                            $tmp = $dir . DIRECTORY_SEPARATOR . $file;
                            if($this->myi < 2 && is_dir($tmp)){
                                $res = $this->lookupDir($tmp);
                                $res && ($this->myi--);
                            }elseif ($this->myi >= 2 && 'queue' == $file){
                                $res = $this->lookupDir($tmp, "app\\". basename($dir) ."\\queue\\");
                                $res && ($this->myi--);
                                break;
                            }
                        }
                    }
                }
                closedir($handle);
            }
        }
        return $result;
    }
    public function getQueues()
    {
        /* $DS = DIRECTORY_SEPARATOR;
        $preg = "/(\w+)\\{$DS}queue\\{$DS}(\w+)\.php/";
        $callback = function($file)use($preg){
            if(preg_match($preg, $file, $match)){
                return "app\\$match[1]\\queue\\$match[2]";
            }else{
                return false;
            }
        };
        $queues = dir_iteration(APP_PATH, $callback); */
        $this->lookupDir(APP_PATH);
        $swooles = [];
        $commons = [];
        foreach ($this->tmpQueues as $queue){
            if(is_implements($queue, QueueJob::class)){
                $info = $queue::jobInfo(false);
                switch ($info['type']){
                    case 'swoole':
                        $swooles[] = $info;
                        break;
                    case 'common':
                        $commons[] = $info;
                        break;
                }
            }
        }
        return ['swooles'=>$swooles,'commons'=>$commons];
    }

    public function elements($key)
    {
        return array_map(function($element)use($key){
            $element = unserialize($element);
            $count = $this->cache->failCount($key, $element);
            return ['element'=>$element,'count'=>$count];
            }, $this->cache->members($key));
    }

    public function elementsCount($key)
    {
        $members = $this->cache->membersCounts($key);
        $results = [];
        foreach ($members as $member => $remain){
            $element = unserialize($member);
            $count = $this->cache->failCount($key, $element);
            $results[] = [
                'element' => $element,
                'count' => intval($count),
                'remain'=> $remain
            ];
        }
        return $results;
    }

    public function setTimeout($key, $timeout)
    {
        $this->cache->setTimeout($key, $timeout);
    }

    public function clear($key)
    {
        $this->cache->delQueue($key);
    }

    public function removeElement($key, $element)
    {
        $result = $this->cache->memberRemove($key, $element);
        if($result) $this->cache->removeTimer($key, $element);
        return $result;
    }

    public function logs($key, $start, $end)
    {
        return $this->cacheLog->getRecordLog($key, $start, $end);
    }

    public function setRuntype($queuer, $hosttype, $types)
    {
    	$currentType = $this->cache->getQueueRunType($queuer);
    	$config = $types[$currentType] ?? null;
    	$cmder = SwooleCmder::create($config);
    	$obj = $cmder->send(new StopTableTask(['key'=>$queuer,'task'=>0]));
    	$result = $obj->getResult();
    	///
    	return $this->cache->setQueueRunType($queuer, $hosttype);
    }

    /**
     */
    public function reload($queuer)
    {
        if($queueType = $this->cache->getQueue($queuer)){
            if(is_extends($queueType, QueueJob::class)){
                return $queueType::jobInfo();
            }else{
                throw new JsonErrorException("不合法的消费者");
            }
        }else{
            throw new JsonErrorException("已不存在");
        }
    }

    public function queueStatus($config = null, $queuer = null)
    {
    	$cmder = SwooleCmder::create($config);
        $result= $cmder->send(new SwooleStatus(['queuer' => $queuer]));
        $data = $result->getResult();
        if(isset($data['items'])){
            foreach ($data['items'] as $k => $val){
                $data['items'][$k]['consuming'] = [];
                if(is_subclass_of($val['task'], SwooleQueueJob::class)){
                    $task = $this->cache->taskGets($val['workerId']);
                    if(isset($task['queuer']) && $task['queuer'] == $val['task']) $data['items'][$k]['consuming'][] = $task['params'];
                }
            }
        }
        return $data;
    }
    
    public function getConsumingNews($key, $workerId=null)
    {
        if($workerId){
            $task = $this->cache->taskGets($workerId);
            if(isset($task['queuer']) && $task['queuer'] == $key) $data[] = $task['params'];
        }else{
            $data = $this->cache->showWaitQueue($key, 999);
        }
        return $data;
    }

    public function changeRunStatus($queuer, $taskId, $status, $config = null)
    {
    	$cmder = SwooleCmder::create($config);
        $cmder->send(new QueueStatus(['taskId'=>$taskId,'queuer'=>$queuer]));

    }

    public function changeStatus($queuer, $status, $config = null)
    {
        $this->cache->stopSwooleQueue($queuer, !$status);
        if(!$status){
            $cmder = SwooleCmder::create($config);
            $result = $cmder->send(new StopTableTask(['key'=>$queuer,'task'=>0]));
            return $result->getResult();
        }
    }
}
